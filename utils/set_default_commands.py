from aiogram import types

from loader import dp
from utils.some_variable import metal_types, kush_prices, temp_operations
from keyboards.reply_kb_menu import reply_kb_menu
from keyboards.reply_kb_metals import reply_kb_metals
from keyboards.reply_kb_kush import reply_kb_kush
from keyboards.reply_kb_information import reply_kb_information
from keyboards.reply_kb_clean_weights import reply_kb_clean_weights

from states.recording import Recording
from states.kush import Kush
from states.report import Report
from states.cleanWeights import CleanWeights
from api_sheets import call_metals_prices

from data import db_session
from data.users import User


with open('utils/usage guide', 'r', encoding='UTF-8') as guide:
    GUIDE = ''.join(guide.readlines())


@dp.message_handler(commands=['start'])
async def begin(message: types.Message):
    dbs = db_session.create_session()
    current_user = dbs.query(User).get(message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not current_user:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        user = User()
        user.id = message.from_user.id
        user.metal = '–ß–µ—Ä–Ω—ã–π'
        user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        dbs.add(user)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        current_user.metal = '–ß–µ—Ä–Ω—ã–π'
        current_user.price = float(metal_types['–ß–µ—Ä–Ω—ã–π'])
        current_user.client_amount = 0
        current_user.kush_recording = False
        current_user.operation_ended = False
        current_user.kush_percent = 0
    dbs.commit()
    await message.bot.send_message(message.chat.id, '–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!', reply_markup=reply_kb_menu)


@dp.message_handler(commands=['update_prices'])
async def update_prices(message: types.Message):
    global metal_types, kush_prices
    request_metals_types = call_metals_prices()
    if not request_metals_types:
        request_metals_types = call_metals_prices()
    request_kush_prices = call_metals_prices(kush=True)
    if not request_kush_prices:
        request_kush_prices = call_metals_prices(kush=True)
    metal_types = dict(request_metals_types)
    kush_prices = dict(request_kush_prices)
    await message.bot.send_message(message.chat.id, '–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=reply_kb_menu)


@dp.message_handler(content_types=['text'])
async def set_text(message):
    global temp_operations
    if message.chat.type == 'private':
        if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å–∞':
            await message.bot.send_message(message.chat.id, '–¢–∏–ø—ã –º–µ—Ç–∞–ª–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                           reply_markup=reply_kb_metals)
            await Recording.waiting_for_data_record.set()
            return
        elif message.text == '–ö—É—à':
            await message.bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ –∫—É—à–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                           reply_markup=reply_kb_kush)
            await Kush.waiting_for_kush_request.set()
        elif message.text == '–û—Ç—á—ë—Ç—ã':
            await message.bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                           reply_markup=reply_kb_information)
            await Report.waiting_for_report_request.set()
        elif message.text == '–ß–∏—Å—Ç—ã–µ –≤–µ—Å–∞':
            await message.bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∏ —á–∏—Å—Ç—ã—Ö –≤–µ—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                                           reply_markup=reply_kb_clean_weights)
            await CleanWeights.waiting_for_request.set()
        elif message.text == 'üìö–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ':
            await message.bot.send_message(message.chat.id, GUIDE,
                                           reply_markup=reply_kb_menu)
        else:
            await message.bot.send_message(message.chat.id, '–í —ç—Ç–æ–º –±–æ—Ç–µ –Ω–µ—Ç—É —Ç–∞–∫–æ–π –∫–æ—Ç–µ–≥–æ—Ä–∏–∏',
                                           reply_markup=reply_kb_menu)